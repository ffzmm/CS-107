#ifndef REASSEMBLE_H
#define REASSEMBLE_H
/*
 * File: reassemble.h
 * Authors: Cynthia Lee, Travis Geis, Julie Zelenski
 * ----------------------
 * This program reassembles data fragments using a greedy match-and-merge
 * algorithm.
 * 
 * The functions listed here are all REQUIRED for you to implement in 
 * reassemble.c (do not edit this reassemble.h), and they must work as 
 * described in the comments here. You are welcome to add other helper
 * functions as desired by editing reassemble.c (do not edit this file
 * in any way to add them). 
 */

/* 
 * STUDENTS: DO *NOT* EDIT THIS FILE IN ANY WAY.
 *   You may ONLY edit the reassemble.c file. 
 */

 #include <stdbool.h>

/* Function: do_reassemble
 * Given an array of fragments and the size of the array, perform the task of
 * reassembling the text. 
 */ 
void do_reassemble(char * frags[], int nelems);
 
/* Function: locate_overlap
 * Given two strings, calculate the best overlap of the right onto the left, and 
 * return the maximal overlap found. So this function can identify overlaps where: 
 * -- right_frag is the same as left_frag (full overlap), 
 * -- right_frag fits entirely inside left_frag (substring), 
 * -- right_frag can attach to the end of left_frag (extend beyond its end), or
 * -- none of the above (return overlap of 0 and set offset to strlen(left_frag)).
 *
 * This function does NOT attempt to identify overlaps where:
 * -- left_frag can attach to the end of right_frag (extend beyond its end).
 * 
 * Also, fill the pointer to the int with the offset needed to get that
 * overlap (in other words, right_frag fits starting at left_frag[offset]). If no
 * overlap is found, then offset is set to strlen(left_frag).
 */
int locate_overlap(char *left_frag, char *right_frag, int *offset);

/* Function: match_at_offset
 * Given two strings and one integer offset, determine if the right string 
 * matches the left when placed starting at left_string[offset], so that the right 
 * extends past the end of the left. In other words, this function tests if the 
 * left string and right string are equal to each other starting at left_string[offset] 
 * and right_string[0], and ending at the end of left_string or right_string (whichever 
 * ends first). Returns true if there is a match, else false. 
 * 
 * Also returns false in the case that offset is <= 0, or when the match does not 
 * involve right_frag extending past the end of left_frag (the tests for these are 
 * already written for you in the starter code).
 */
bool match_at_offset(char *left_frag, char *right_frag, int offset);

/* Function: merge
 * Given two char* strings and one integer offset, merge the right string
 * onto the left, starting at left_frag[offset]. Return a pointer to a
 * newly-heap-allocated string that contains the result of the merge. Before 
 * returning, merge frees left_frag and right_frag.
 */
char *merge(char *left_frag, char *right_frag, int offset);

/* 
 * STUDENTS: DO *NOT* EDIT THIS FILE IN ANY WAY.
 *   You may ONLY edit the reassemble.c file. 
 */

#endif